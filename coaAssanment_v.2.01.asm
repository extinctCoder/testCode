.MODEL SMALL
.STACK 100H
.DATA                   
    WELLCOME_MSG DB '-------WELLCOME TO SIMPLE CALCULATOR-------$'
    INPUT_ERROR DB 0DH,0AH,0DH,0AH,'!!!...WRONG INPUT...!!!',24H
    NUMBER_1_INPUT_MSG DB 0DH,0AH,'PLEASE INPUT THE FIRST NUMBER: $'
    NUMBER_2_INPUT_MSG DB 0DH,0AH,'PLEASE INPUT THE SECOND NUMBER: $'
    MENU_OPTION_MSG DB 0DH,0AH,'PLEASE CHOSE THE OPERATION YOU WANT TO DO$'
    MENU_OPTION_ADD DB 0DH,0AH,'PRESS KEY "1" FOR ADDITION$'
    MENU_OPTION_SUB DB 0DH,0AH,'PRESS KEY "2" FOR SUBTRACTION$'
    MENU_OPTION_MUL DB 0DH,0AH,'PRESS KEY "3" FOR MULTIPLICATION$'
    MENU_OPTION_DIV DB 0DH,0AH,'PRESS KEY "4" FOR DIVISION$'
    MENU_OPTION_DECIDE DB 0DH,0AH,'NOW PRESS THOSE KEY FOR DO ANY OPRATION: $'   
    OPTION_ADDITION DB 0DH,0AH,0DH,0AH,'ADDITION OF THIS TWO NUMBER IS: $'
    OPTION_SUBTRACTION DB 0DH,0AH,0DH,0AH,'SUBTRACTION OF THIS TWO NUMBER IS: $'
    OPTION_MULTIPLICATION DB 0DH,0AH,0DH,0AH,'MULTIPLICATION OF THIS TWO NUMBER IS: $'
    OPTION_DIVISION_RESULT DB 0DH,0AH,0DH,0AH,'DIVISION RESULT OF THIS TWO NUMBER IS: $'
    OPTION_DIVISION_REMINDER DB 0DH,0AH,0DH,0AH,'DIVISION REMINDER OF THIS TWO NUMBER IS: $'
    EXIT_CONFIRMATION_MSG DB 0DH,0AH,0DH,0AH,'WOULD YOU LIKE TO EXIT THEN PRESS "Y": $'
    NUMBER_1 DW '?'
    NUMBER_2 DW '?'
    RESULT DW '?'
    DIVISION_RESULT DB '?'
    DIVISION_REMINDER DB '?'
    DIVISION_FLAG DB '?'
    ENTER DB 0DH,0AH,24H
.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS,AX
    MOV AH,9
    LEA DX,WELLCOME_MSG
    INT 21H    
INPUT_SEGMENT:
    CALL INPUT    
MENU_SEGMENT:
    CALL MENU    
DECISION_SEGMENT:
    CMP BL,31H
        JE CALL ADDITION
    CMP BL,32H
        JE CALL SUBTRACTION
    CMP BL,33H
        JE CALL MULTIPLICATION
    CMP BL,34H                 
        JE CALL DIVISION
OUTPUT_SEGMENT:
    CALL OUTPUT         
EXIT_SEGMENT:
    MOV AH,9
    LEA DX,EXIT_CONFIRMATION_MSG
    INT 21H
    MOV AH,1
    INT 21H
    CMP AL,59H
        JNE INPUT_SEGMENT
    MOV AH,4CH
    INT 21H         
    MAIN ENDP
INPUT PROC    
        JMP NUMBER_1_INPUT_SEGMENT
NUMBER_1_INPUT_ERROR_SEGMENT:
    MOV AH,9
    LEA DX,INPUT_ERROR
    INT 21H
    MOV AH,9
    LEA DX,ENTER
    INT 21H
NUMBER_1_INPUT_SEGMENT:
    MOV AH,9
    LEA DX,NUMBER_1_INPUT_MSG
    INT 21H
    MOV CX,5
    XOR BX,BX
NUMBER_1_INPUT_LOOP:        
    MOV AH,1
    INT 21H
    CMP AL,0DH
        JE NUMBER_2_INPUT_SEGMENT 
    CMP AL, 30H
        JL NUMBER_1_INPUT_ERROR_SEGMENT           
    CMP AL, 39H
        JG NUMBER_1_INPUT_ERROR_SEGMENT     
    MOV AH,0H    
    SUB AL,30H    
    PUSH AX
    MOV AX, 0AH
    MUL BX
    POP BX
    ADD BX,AX 
        LOOP NUMBER_1_INPUT_LOOP
    JMP NUMBER_2_INPUT_SEGMENT                      
NUMBER_2_INPUT_ERROR_SEGMENT:
    MOV AH,9
    LEA DX,INPUT_ERROR
    INT 21H
    MOV AH,9
    LEA DX,ENTER
    INT 21H         
NUMBER_2_INPUT_SEGMENT:   
    MOV AH,9
    LEA DX,NUMBER_2_INPUT_MSG
    INT 21H
    MOV CX,5
    XOR DX,DX
NUMBER_2_INPUT_LOOP:       
    MOV AH,1
    INT 21H
    CMP AL,0DH
        JE DATA_STORE_SEGMENT
    CMP AL, 30H
        JL NUMBER_2_INPUT_ERROR_SEGMENT           
    CMP AL, 39H
        JG NUMBER_2_INPUT_ERROR_SEGMENT    
    MOV AH,0H    
    SUB AL,30H    
    PUSH AX
    MOV AX, 0AH
    MUL DX
    POP DX
    ADD DX,AX
        LOOP NUMBER_2_INPUT_LOOP
DATA_STORE_SEGMENT:
    MOV NUMBER_1, BX
    MOV NUMBER_2, DX
        JMP MENU_SEGMENT
    INPUT ENDP
MENU PROC    
        JMP MENU_OPTION_PRINT_SEGMENT      
MENU_OPTION_ERROR_SEGMENT:     
    MOV AH,9
    LEA DX,INPUT_ERROR
    INT 21H
    MOV AH,9
    LEA DX,ENTER
    INT 21H 
MENU_OPTION_PRINT_SEGMENT:    
    MOV AH,9
    LEA DX,MENU_OPTION_MSG
    INT 21H
    LEA DX,MENU_OPTION_ADD
    INT 21H
    LEA DX,MENU_OPTION_SUB
    INT 21H
    LEA DX,MENU_OPTION_MUL
    INT 21H
    LEA DX,MENU_OPTION_DIV
    INT 21H
    LEA DX,MENU_OPTION_DECIDE
    INT 21H    
    MOV AH,1
    INT 21H 
    CMP AL, 31H
        JL MENU_OPTION_ERROR_SEGMENT           
    CMP AL, 34H
        JG MENU_OPTION_ERROR_SEGMENT
    MOV BL,AL
        JMP DECISION_SEGMENT        
    MENU ENDP
ADDITION PROC
    MOV AH,9
    LEA DX, OPTION_ADDITION
    INT 21H
    XOR AX,AX
    XOR BX,BX  
    MOV AX,NUMBER_1
    MOV BX,NUMBER_2   
    ADD AX, BX
    MOV RESULT, AX
    MOV CL, 0
    MOV DIVISION_FLAG, CL
        JMP OUTPUT_SEGMENT 
    ADDITION ENDP
SUBTRACTION PROC
    MOV AH,9
    LEA DX,OPTION_SUBTRACTION
    INT 21H
    XOR AX,AX
    XOR BX,BX 
    MOV AX,NUMBER_1
    MOV BX,NUMBER_2
    CMP AX,BX
        JL REVERSE_SUBTRACTION         
    SUB AX, BX
    MOV RESULT, AX
    MOV CL, 0
    MOV DIVISION_FLAG, CL
        JMP OUTPUT_SEGMENT
REVERSE_SUBTRACTION:
    SUB BX, AX
    MOV RESULT, BX
    MOV AH,2
    MOV DL,2DH
    INT 21H
    MOV CL, 0
    MOV DIVISION_FLAG, CL        
        JMP OUTPUT_SEGMENT
    SUBTRACTION ENDP
MULTIPLICATION PROC
    MOV AH,9
    LEA DX,OPTION_MULTIPLICATION
    INT 21H
    XOR AX,AX
    XOR BX,BX 
    MOV AX,NUMBER_1
    MOV BX,NUMBER_2
    MUL BX
    MOV RESULT, AX
    MOV CL, 0
    MOV DIVISION_FLAG, CL
        JMP OUTPUT_SEGMENT    
    MULTIPLICATION ENDP
DIVISION PROC
    XOR AX,AX
    XOR BX,BX 
    MOV AX,NUMBER_1
    MOV BX,NUMBER_2
    CMP AX,BX
        JL REVERSE_DIVISION
    DIV BL
    MOV DIVISION_RESULT, AL
    MOV DIVISION_REMINDER, AH
    MOV CL, 1
    MOV DIVISION_FLAG, CL
        JMP OUTPUT_SEGMENT
REVERSE_DIVISION:
    MOV AH,9
    LEA DX,INPUT_ERROR
    INT 21H 
        JMP EXIT_SEGMENT                
    DIVISION ENDP
PROC OUTPUT
    MOV CL, DIVISION_FLAG
    OR CL,CL
        JNE DIVISION_MODIFY_RESULT
    MOV AX,RESULT
VALUE_PUSH:        
    PUSH AX
    POP AX
    XOR CX,CX
    XOR DX,DX
    MOV BX,10D   
DECIMAL_CONVERT_SEGMENT:
    DIV BX
    PUSH DX
    XOR DX,DX
    INC CX
    OR AX,AX
        JNE DECIMAL_CONVERT_SEGMENT
RESULT_PRINT_SEGMENT:
    POP DX
    ADD DL,30H
    MOV AH,02
    INT 21H
        LOOP RESULT_PRINT_SEGMENT
     MOV CL,DIVISION_FLAG
    CMP CL,2
        JE DIVISION_MODIFY_REMINDER           
    JMP EXIT_SEGMENT
DIVISION_MODIFY_RESULT:
    MOV AH,9
    LEA DX,OPTION_DIVISION_RESULT
    INT 21H
    MOV AL,DIVISION_RESULT
    XOR AH,AH
    MOV CL,2
    MOV DIVISION_FLAG,CL
        JMP VALUE_PUSH
DIVISION_MODIFY_REMINDER:
    MOV CL,1
    MOV DIVISION_FLAG,CL              
    MOV AH,9
    LEA DX,OPTION_DIVISION_REMINDER
    INT 21H 
    MOV AL,DIVISION_REMINDER
    XOR AH,AH
        JMP VALUE_PUSH
    OUTPUT ENDP
ENDP MAIN    
